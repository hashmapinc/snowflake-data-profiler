{"version":3,"sources":["Components/hashmap_banner_white.png","Components/Navbar.js","Components/Table.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","target","src","hashmaplogo","width","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Table","props","handleSubmit","bind","event","preventDefault","data","FormData","fetch","method","body","headers","then","response","js","Form","onSubmit","this","Group","Label","Control","placeholder","name","Button","variant","Header","height","display","App","charSet","content","rel","integrity","crossOrigin","async","defer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c43ff8e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hashmap_banner_white.f78fe945.png\";","import React, {Component} from 'react';\nimport hashmaplogo from './hashmap_banner_white.png'\n\nclass Navbar extends Component {\n    render() {\n        return (\n        <header className=\"navbar navbar-expand-lg navbar-dark fixed-top bg-dark\">\n            <a className=\"navbar-brand\" href=\"https://www.hashmapinc.com/\" target=\"_blank\">\n                {<img src={hashmaplogo} width=\"200px\"/>}\n            </a>\n\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <div className=\"mx-auto my-2 text-white\">\n                    <h3>Snowflake Data Profiler</h3>\n                </div>\n\n                <ul className=\"navbar-nav\">\n                    <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"https://www.hashmapinc.com/snowflakedataprofiler-reachout\" target=\"_blank\">Contact\n                        Us</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"https://forms.gle/WfiB6YctX5Jg2zTs6\" target=\"_blank\">Feedback </a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a href={''} target=\"_blank\" className=\"nav-item btn btn-primary ml-3\">\n                        See a Sample Profile\n                        </a>\n                    </li>\n                </ul>\n            </div>\n        </header>\n        )\n    }\n}\n\nexport default Navbar\n\n    ","import React, {Component} from 'react';\nimport { Button, Form} from \"react-bootstrap\";\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n    // this.state = {\n    //   username: \"\",\n    //   password: \"\",\n    //   url: \"\",\n    //   role: \"\",\n    //   warehouse: \"\",\n    //   database: \"\",\n    //   schema: \"\",\n    //   table: \"\",\n    // };\n  }\n\n  // handleChange = event => {\n  //   this.setState({\n  //     [event.target.id]: event.target.value\n  //   });\n  // }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n\n    fetch('http://0.0.0.0:5000/', {\n      method:\"POST\",\n      body: data,\n      headers:{\n        \"content_type\":\"multpart/form-data\",\n      },\n      \n    }).then((response) => response.js)\n  }\n    render() {\n        // const { username, password, url, role, warehouse, database, schema, table } = this.state\n        return (\n    <div className=\"row\">\n      <div className=\"col-8 col-xs-12 order-md-1 mx-auto\">\n        <h4 className=\"mb-3\">Snowflake details:</h4>\n\n        <Form className=\"needs-validation\" onSubmit={this.handleSubmit}>\n          <Form.Group id='username'>\n            <Form.Label>SnowFlake Username</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"elon.must@taesla.com\" name=\"username\"/>\n          </Form.Group>\n          <Form.Group id='password'>\n            <Form.Label>SnowFlake Password</Form.Label>\n            <Form.Control type=\"password\" placeholder=\"cybertruck2021\" name=\"password\"/>\n          </Form.Group>\n          <Form.Group id='url'>\n            <Form.Label>SnowFlake Account</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Tesla\" name=\"url\"/>\n          </Form.Group>\n          <Form.Group id='role'>\n            <Form.Label>SnowFlake Role</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"CEO\" name='role'/>\n          </Form.Group>\n          <Form.Group id='warehouse'>\n            <Form.Label>SnowFlake Virtual Warehouse</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"FLAMETHROWER_REPORTING_WH\" name=\"warehouse\"/>\n          </Form.Group>\n          <Form.Group id='database'>\n            <Form.Label>Database</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"PRODUCTION\" name=\"database\"/>\n          </Form.Group>\n          <Form.Group id='schema'>\n            <Form.Label>Schema</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"INVENTORY\" name=\"schema\"/>\n          </Form.Group>\n          <Form.Group id='table'>\n            <Form.Label>Table</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"MODEL_Y_INVENTORY\" name=\"table\"/>\n          </Form.Group>\n          <Button variant=\"btn btn-primary btn-lg btn-block\" type=\"submit\" id=\"submit_button\">\n            Create data profile\n          </Button>\n        </Form> \n      </div>\n    </div>\n        )\n    }\n}\n\nexport default Table","import React, {Component} from 'react'\n\n\nclass Header extends Component {\n    render() {\n        return (\n            <div className=\"py-5 text-center\">\n                <h2>Generate a data profile of the first 10K rows of one of your Snowflake tables</h2>\n                \n                {/* {% if error %}\n                <p class=\"error\">{{ error }}</p>\n                {% endif %} */}\n\n                <div id='spinner' className=\"spinner-border text-primary\" width=\"5rem\" height=\"5rem\" display=\"none\"></div>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React, {Component} from 'react';\nimport Navbar from './Components/Navbar'\nimport Table from './Components/Table'\nimport Header from './Components/Header'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n          <meta charSet=\"utf-8\" />\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=yes\" />\n          <link rel=\"stylesheet\" href=\"https://unpkg.com/purecss@2.0.3/build/pure-min.css\"\n            integrity=\"sha384-cg6SkqEOCV1NbJoCu11+bm0NvBRc8IYLRGXkmNrqUBfTjmMYwNKPWBTIKyw9mHNJ\" crossOrigin=\"anonymous\" />\n          <link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\" />\n          <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lato\" />\n          <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Montserrat\" />\n          <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />\n          <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url_for('static', filename='styles/main.css') }}\" />\n\n        <Navbar />\n        <Header />\n        <Table />\n\n        <script type=\"text/javascript\" id=\"hs-script-loader\" async defer src=\"//js.hs-scripts.com/4376150.js\"></script>\n        <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n          integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n          crossOrigin=\"anonymous\"></script>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n          integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n          crossOrigin=\"anonymous\"></script>\n        <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n          integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n          crossOrigin=\"anonymous\"></script>\n      </div>\n      )\n  }\n    \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}